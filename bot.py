import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')

class AnimeBot:
    def __init__(self):
        self.states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        self.states[user.id] = {'step': None}
        
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∏–º–µ —Å –æ–∑–≤—É—á–∫–æ–π VexeraDubbing.\n\n"
            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/menu - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ\n"
            "/auth - –í—Ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
        )

    async def menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∞–Ω–∏–º–µ"""
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–Ω–∏–º–µ –∏–∑ –ë–î
        anime_list = [
            (1, "–ù–∞—Ä—É—Ç–æ"),
            (2, "–ë–ª–∏—á"),
            (3, "–í–∞–Ω –ü–∏—Å")
        ]
        
        if not anime_list:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ –ø–æ–∫–∞ –ø—É—Å—Ç")
            return
        
        keyboard = [
            [InlineKeyboardButton(title, callback_data=f"anime_{id}")]
            for id, title in anime_list
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üéå –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=reply_markup
        )

    async def anime_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–Ω–∏–º–µ"""
        query = update.callback_query
        await query.answer()
        
        anime_id = int(query.data.split('_')[1])
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–Ω–∏–º–µ –∏–∑ –ë–î
        anime = {
            'title': "–ù–∞—Ä—É—Ç–æ",
            'description': "–ò—Å—Ç–æ—Ä–∏—è –æ —é–Ω–æ–º –Ω–∏–Ω–¥–∑—è, –∫–æ—Ç–æ—Ä—ã–π –º–µ—á—Ç–∞–µ—Ç —Å—Ç–∞—Ç—å –•–æ–∫–∞–≥–µ",
            'cover_url': "https://example.com/naruto.jpg"
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
        episodes = [(1, "https://example.com/ep1.mp4"), (2, "https://example.com/ep2.mp4")]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ—Ä–∏—è–º–∏
        episodes_buttons = [
            [InlineKeyboardButton(f"‚ñ∂Ô∏è –°–µ—Ä–∏—è {num}", callback_data=f"episode_{anime_id}_{num}")]
            for num, _ in episodes
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_buttons = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")],
            [InlineKeyboardButton("üì• –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏—é", callback_data=f"add_episode_{anime_id}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(episodes_buttons + control_buttons)
        
        await query.edit_message_text(
            f"üì∫ <b>{anime['title']}</b>\n\n"
            f"{anime['description']}\n\n"
            f"üî¢ –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Ä–∏–π: {len(episodes)}",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        
        if anime.get('cover_url'):
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=anime['cover_url'],
                reply_to_message_id=query.message.message_id
            )

    async def watch_episode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–∏—é"""
        query = update.callback_query
        await query.answer()
        
        _, anime_id, episode_num = query.data.split('_')
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–∏—é –∏–∑ –ë–î
        video_url = "https://example.com/ep1.mp4"
        
        await context.bot.send_video(
            chat_id=query.message.chat_id,
            video=video_url,
            caption=f"üé• –°–µ—Ä–∏—è {episode_num}",
            supports_streaming=True
        )

    async def back_to_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"""
        await self.menu(update.callback_query.message, context)

    async def admin_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user = update.effective_user
        args = context.args
        
        if not args:
            await update.message.reply_text(
                "üîí –î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ:\n"
                f"/auth <–ø–∞—Ä–æ–ª—å>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /auth MySecretPassword"
            )
            return
        
        if args[0] == ADMIN_PASSWORD:
            self.states[user.id] = {'is_admin': True}
            await update.message.reply_text(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n"
                "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
            )
            await self.show_admin_panel(update, context)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user = update.effective_user
        if not self.states.get(user.id, {}).get('is_admin'):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–µ", callback_data="admin_add_anime")],
            [InlineKeyboardButton("üì§ –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–∏", callback_data="admin_add_episodes")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    async def add_anime_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–∏–º–µ"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        if not self.states.get(user.id, {}).get('is_admin'):
            await query.edit_message_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        
        self.states[user.id]['step'] = 'awaiting_anime_data'
        await query.edit_message_text(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–Ω–∏–º–µ</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | URL_–æ–±–ª–æ–∂–∫–∏</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>–ù–∞—Ä—É—Ç–æ | –ò—Å—Ç–æ—Ä–∏—è –æ –Ω–∏–Ω–¥–∑—è | https://example.com/naruto.jpg</code>",
            parse_mode="HTML"
        )

    async def process_anime_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –∞–Ω–∏–º–µ"""
        user = update.effective_user
        if self.states.get(user.id, {}).get('step') != 'awaiting_anime_data':
            return
        
        try:
            data = update.message.text.split('|')
            if len(data) < 3:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | URL_–æ–±–ª–æ–∂–∫–∏\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            title = data[0].strip()
            description = data[1].strip()
            cover_url = data[2].strip()
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            # add_anime_to_db(title, description, cover_url)
            
            self.states[user.id]['step'] = None
            await update.message.reply_text(
                f"‚úÖ –ê–Ω–∏–º–µ <b>{title}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
                parse_mode="HTML"
            )
            await self.show_admin_panel(update, context)
            
        except Exception as e:
            logger.error(f"Error adding anime: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–Ω–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def add_episodes_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–π"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        if not self.states.get(user.id, {}).get('is_admin'):
            await query.edit_message_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–Ω–∏–º–µ –∏–∑ –ë–î
        anime_list = [(1, "–ù–∞—Ä—É—Ç–æ"), (2, "–ë–ª–∏—á")]
        
        keyboard = [
            [InlineKeyboardButton(title, callback_data=f"select_anime_{id}")]
            for id, title in anime_list
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üì∫ –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–π:",
            reply_markup=reply_markup
        )

    async def select_anime_for_episodes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—ã–±–æ—Ä –∞–Ω–∏–º–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–π"""
        query = update.callback_query
        await query.answer()
        
        anime_id = int(query.data.split('_')[2])
        user = query.from_user
        
        self.states[user.id]['step'] = 'awaiting_episodes'
        self.states[user.id]['selected_anime'] = anime_id
        
        await query.edit_message_text(
            "üì§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–π</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–ù–æ–º–µ—Ä | URL</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>1 | https://example.com/ep1.mp4</code>\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–ù–æ–º–µ—Ä</code>\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
            parse_mode="HTML"
        )

    async def process_episode_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏"""
        user = update.effective_user
        if self.states.get(user.id, {}).get('step') != 'awaiting_episodes':
            return
        
        try:
            anime_id = self.states[user.id]['selected_anime']
            
            if update.message.video:
                # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª
                if not update.message.caption:
                    await update.message.reply_text("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –≤–∏–¥–µ–æ")
                    return
                
                episode_num = int(update.message.caption)
                video_file = await update.message.video.get_file()
                video_url = video_file.file_path
            else:
                # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ç–µ–∫—Å—Ç
                data = update.message.text.split('|')
                if len(data) < 2:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: –ù–æ–º–µ—Ä | URL\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                    )
                    return
                
                episode_num = int(data[0].strip())
                video_url = data[1].strip()
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            # add_episode_to_db(anime_id, episode_num, video_url)
            
            await update.message.reply_text(
                f"‚úÖ –°–µ—Ä–∏—è {episode_num} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
        except Exception as e:
            logger.error(f"Error adding episode: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def cancel_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        user = update.effective_user
        self.states[user.id] = {'step': None}
        
        await update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )
        await self.show_admin_panel(update, context)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = AnimeBot()
    
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CommandHandler("menu", bot.menu))
    app.add_handler(CommandHandler("auth", bot.admin_auth))
    app.add_handler(CommandHandler("cancel", bot.cancel_action))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    app.add_handler(CallbackQueryHandler(bot.anime_details, pattern="^anime_"))
    app.add_handler(CallbackQueryHandler(bot.watch_episode, pattern="^episode_"))
    app.add_handler(CallbackQueryHandler(bot.back_to_menu, pattern="^back_to_menu$"))
    app.add_handler(CallbackQueryHandler(bot.show_admin_panel, pattern="^admin_panel$"))
    app.add_handler(CallbackQueryHandler(bot.add_anime_handler, pattern="^admin_add_anime$"))
    app.add_handler(CallbackQueryHandler(bot.add_episodes_handler, pattern="^admin_add_episodes$"))
    app.add_handler(CallbackQueryHandler(bot.select_anime_for_episodes, pattern="^select_anime_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.process_anime_data))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.process_episode_data))
    app.add_handler(MessageHandler(filters.VIDEO, bot.process_episode_data))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == '__main__':
    main()
