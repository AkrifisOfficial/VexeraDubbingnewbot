import os
import sqlite3
import logging
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('anime.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS anime (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT,
        cover_url TEXT
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS episodes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        anime_id INTEGER,
        number INTEGER,
        video_url TEXT,
        FOREIGN KEY(anime_id) REFERENCES anime(id)
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        is_admin BOOLEAN DEFAULT 0
    )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
def add_anime(title, description, cover_url):
    conn = sqlite3.connect('anime.db')
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO anime (title, description, cover_url) VALUES (?, ?, ?)",
        (title, description, cover_url)
    )
    conn.commit()
    conn.close()
    return cursor.lastrowid

def get_anime_list():
    conn = sqlite3.connect('anime.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, title FROM anime")
    anime_list = cursor.fetchall()
    conn.close()
    return anime_list

def get_anime_details(anime_id):
    conn = sqlite3.connect('anime.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM anime WHERE id = ?", (anime_id,))
    anime = cursor.fetchone()
    conn.close()
    return anime

def get_episodes(anime_id):
    conn = sqlite3.connect('anime.db')
    cursor = conn.cursor()
    cursor.execute("SELECT number, video_url FROM episodes WHERE anime_id = ?", (anime_id,))
    episodes = cursor.fetchall()
    conn.close()
    return episodes

def add_episode(anime_id, number, video_url):
    conn = sqlite3.connect('anime.db')
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO episodes (anime_id, number, video_url) VALUES (?, ?, ?)",
        (anime_id, number, video_url)
    )
    conn.commit()
    conn.close()

def set_admin(user_id):
    conn = sqlite3.connect('anime.db')
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR REPLACE INTO users (user_id, is_admin) VALUES (?, 1)",
        (user_id,)
    )
    conn.commit()
    conn.close()

def is_admin(user_id):
    conn = sqlite3.connect('anime.db')
    cursor = conn.cursor()
    cursor.execute("SELECT is_admin FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result and result[0] == 1

# ===================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ =====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç {user.first_name}!\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ –æ—Ç –æ–∑–≤—É—á–∫–∏ VexeraDubbing.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∞–Ω–∏–º–µ."
    )

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    anime_list = get_anime_list()
    
    if not anime_list:
        await update.message.reply_text("–ê–Ω–∏–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    keyboard = [
        [InlineKeyboardButton(title, callback_data=f"anime_{id}")]
        for id, title in anime_list
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–µ:", reply_markup=reply_markup)

async def anime_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    anime_id = int(query.data.split('_')[1])
    anime = get_anime_details(anime_id)
    
    if not anime:
        await query.edit_message_text("–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    _, title, description, cover_url = anime
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–π
    episodes = get_episodes(anime_id)
    
    if episodes:
        episodes_buttons = [
            [InlineKeyboardButton(f"–°–µ—Ä–∏—è {number}", callback_data=f"episode_{anime_id}_{number}")]
            for number, _ in episodes
        ]
        keyboard = episodes_buttons
    else:
        keyboard = []
    
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"<b>{title}</b>\n\n{description}",
        parse_mode="HTML",
        reply_markup=reply_markup
    )
    if cover_url:
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=cover_url,
            reply_to_message_id=query.message.message_id
        )

async def watch_episode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data.split('_')
    anime_id = int(data[1])
    episode_number = int(data[2])
    
    episodes = get_episodes(anime_id)
    video_url = next((url for num, url in episodes if num == episode_number), None)
    
    if not video_url:
        await query.edit_message_text("–°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏
    if video_url.startswith("http"):
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"üé¨ –°–µ—Ä–∏—è {episode_number}:\n{video_url}"
        )
    else:
        await context.bot.send_video(
            chat_id=query.message.chat_id,
            video=video_url,
            supports_streaming=True
        )

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await menu(query.message)

# ===================== –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è) =====================
async def admin_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    args = context.args
    
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /auth <–ø–∞—Ä–æ–ª—å>")
        return
    
    if args[0] == ADMIN_PASSWORD:
        set_admin(user_id)
        await update.message.reply_text("‚úÖ –í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!")
        await show_admin_panel(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    keyboard = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–µ", callback_data="admin_add_anime")],
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏—é", callback_data="admin_add_episode")],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

async def add_anime_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await query.edit_message_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | URL –æ–±–ª–æ–∂–∫–∏</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ù–∞—Ä—É—Ç–æ | –ò—Å—Ç–æ—Ä–∏—è –æ –Ω–∏–Ω–¥–∑—è | https://example.com/cover.jpg",
        parse_mode="HTML"
    )
    context.user_data['awaiting_anime_data'] = True

async def add_episode_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    anime_list = get_anime_list()
    if not anime_list:
        await query.edit_message_text("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–Ω–∏–º–µ")
        return
    
    keyboard = [
        [InlineKeyboardButton(title, callback_data=f"admin_episode_{id}")]
        for id, title in anime_list
    ]
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–µ:", reply_markup=reply_markup)

async def receive_anime_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'awaiting_anime_data' not in context.user_data:
        return
    
    try:
        data = update.message.text.split('|')
        if len(data) < 3:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
        
        title = data[0].strip()
        description = data[1].strip()
        cover_url = data[2].strip()
        
        anime_id = add_anime(title, description, cover_url)
        await update.message.reply_text(f"‚úÖ –ê–Ω–∏–º–µ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–æ! ID: {anime_id}")
        del context.user_data['awaiting_anime_data']
        
    except Exception as e:
        logger.error(f"Error adding anime: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–Ω–∏–º–µ")

async def select_anime_for_episode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    anime_id = int(query.data.split('_')[2])
    context.user_data['selected_anime_id'] = anime_id
    
    await query.edit_message_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–ù–æ–º–µ—Ä —Å–µ—Ä–∏–∏ | –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "1 | https://example.com/episode1.mp4\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–ù–æ–º–µ—Ä —Å–µ—Ä–∏–∏</b>\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "1",
        parse_mode="HTML"
    )

async def receive_episode_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'selected_anime_id' not in context.user_data:
        return
    
    try:
        anime_id = context.user_data['selected_anime_id']
        
        if update.message.video:
            # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª
            episode_number = int(update.message.caption)
            video_file = await update.message.video.get_file()
            video_url = video_file.file_path  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –≤ Telegram
        else:
            # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–æ–π
            data = update.message.text.split('|')
            if len(data) < 2:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
                return
            
            episode_number = int(data[0].strip())
            video_url = data[1].strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        add_episode(anime_id, episode_number, video_url)
        await update.message.reply_text(f"‚úÖ –°–µ—Ä–∏—è {episode_number} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        
        del context.user_data['selected_anime_id']
        
    except Exception as e:
        logger.error(f"Error adding episode: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–∏–∏")

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    conn = sqlite3.connect('anime.db')
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM anime")
    anime_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM episodes")
    episodes_count = cursor.fetchone()[0]
    
    cursor.execute("SELECT COUNT(*) FROM users WHERE is_admin = 1")
    admins_count = cursor.fetchone()[0]
    
    conn.close()
    
    stats_text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"‚Ä¢ –ê–Ω–∏–º–µ –≤ –±–∞–∑–µ: {anime_count}\n"
        f"‚Ä¢ –°–µ—Ä–∏–π –≤ –±–∞–∑–µ: {episodes_count}\n"
        f"‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins_count}"
    )
    
    await query.edit_message_text(stats_text)

async def admin_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await show_admin_panel(query.message)

# ===================== –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =====================
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("auth", admin_auth))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ CallbackQuery
    application.add_handler(CallbackQueryHandler(anime_details, pattern="^anime_"))
    application.add_handler(CallbackQueryHandler(watch_episode, pattern="^episode_"))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"))
    
    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    application.add_handler(CallbackQueryHandler(show_admin_panel, pattern="^admin_panel$"))
    application.add_handler(CallbackQueryHandler(add_anime_handler, pattern="^admin_add_anime$"))
    application.add_handler(CallbackQueryHandler(add_episode_handler, pattern="^admin_add_episode$"))
    application.add_handler(CallbackQueryHandler(admin_stats, pattern="^admin_stats$"))
    application.add_handler(CallbackQueryHandler(select_anime_for_episode, pattern="^admin_episode_"))
    application.add_handler(CallbackQueryHandler(admin_cancel, pattern="^admin_cancel$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_anime_data))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_episode_data))
    application.add_handler(MessageHandler(filters.VIDEO, receive_episode_data))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
