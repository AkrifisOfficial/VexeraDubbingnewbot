import os
import sys
import logging
from dotenv import load_dotenv
import psycopg2
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')
DATABASE_URL = os.getenv('DATABASE_URL')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN:
    print("ERROR: BOT_TOKEN not set!")
    sys.exit(1)

if not DATABASE_URL:
    print("ERROR: DATABASE_URL not set!")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ===================== –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å PostgreSQL =====================
def get_connection():
    return psycopg2.connect(DATABASE_URL, sslmode='require')

def init_db():
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS anime (
                    id SERIAL PRIMARY KEY,
                    title TEXT NOT NULL,
                    description TEXT,
                    cover_url TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS episodes (
                    id SERIAL PRIMARY KEY,
                    anime_id INTEGER REFERENCES anime(id) ON DELETE CASCADE,
                    number INTEGER NOT NULL,
                    video_url TEXT NOT NULL,
                    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    is_admin BOOLEAN DEFAULT FALSE,
                    last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
        conn.commit()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def add_anime(title, description, cover_url):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO anime (title, description, cover_url) VALUES (%s, %s, %s) RETURNING id",
                (title, description, cover_url)
            )
            anime_id = cursor.fetchone()[0]
        conn.commit()
    logger.info(f"‚ûï –ê–Ω–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {title} (ID: {anime_id})")
    return anime_id

def get_anime_list():
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT id, title FROM anime ORDER BY title")
            return cursor.fetchall()

def get_anime_details(anime_id):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT id, title, description, cover_url FROM anime WHERE id = %s", (anime_id,))
            return cursor.fetchone()

def get_episodes(anime_id):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT number, video_url FROM episodes WHERE anime_id = %s ORDER BY number", (anime_id,))
            return cursor.fetchall()

def add_episode(anime_id, number, video_url):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO episodes (anime_id, number, video_url) VALUES (%s, %s, %s)",
                (anime_id, number, video_url)
            )
        conn.commit()
    logger.info(f"‚ûï –°–µ—Ä–∏—è {number} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∞–Ω–∏–º–µ ID {anime_id}")

def set_admin(user_id):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(
                "INSERT INTO users (user_id, is_admin) VALUES (%s, TRUE) "
                "ON CONFLICT (user_id) DO UPDATE SET is_admin = EXCLUDED.is_admin",
                (user_id,)
            )
        conn.commit()
    logger.info(f"üëë –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞ –≤—ã–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {user_id}")

def is_admin(user_id):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT is_admin FROM users WHERE user_id = %s", (user_id,))
            result = cursor.fetchone()
            return result and result[0]

# ===================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ =====================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ –æ—Ç –æ–∑–≤—É—á–∫–∏ VexeraDubbing.\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–æ–π /menu, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∏–º–µ."
    )

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        anime_list = get_anime_list()
        
        if not anime_list:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ –ø–æ–∫–∞ –ø—É—Å—Ç")
            return
        
        keyboard = [
            [InlineKeyboardButton(title, callback_data=f"anime_{id}")]
            for id, title in anime_list
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üéå –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ menu: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∞–Ω–∏–º–µ")

async def anime_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        anime_id = int(query.data.split('_')[1])
        anime = get_anime_details(anime_id)
        
        if not anime:
            await query.edit_message_text("‚ö†Ô∏è –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        anime_id, title, description, cover_url = anime
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–∏–π
        episodes = get_episodes(anime_id)
        
        keyboard = []
        if episodes:
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ä–∏–∏
            for number, video_url in episodes:
                keyboard.append([InlineKeyboardButton(f"‚ñ∂Ô∏è –°–µ—Ä–∏—è {number}", callback_data=f"episode_{anime_id}_{number}")])
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            f"üì∫ <b>{title}</b>\n\n"
            f"{description}\n\n"
            f"üî¢ –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Ä–∏–π: {len(episodes)}",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
        if cover_url:
            try:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=cover_url,
                    caption=f"üé¥ –û–±–ª–æ–∂–∫–∞: {title}",
                    reply_to_message_id=query.message.message_id
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±–ª–æ–∂–∫–∏: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ anime_details: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

async def watch_episode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        data = query.data.split('_')
        anime_id = int(data[1])
        episode_number = int(data[2])
        
        episodes = get_episodes(anime_id)
        video_url = next((url for num, url in episodes if num == episode_number), None)
        
        if not video_url:
            await query.edit_message_text("‚ö†Ô∏è –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É
        if video_url.startswith("http"):
            # –î–ª—è —Å—Å—ã–ª–æ–∫ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –∏ –¥—Ä—É–≥–∏—Ö
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"üé• –°–µ—Ä–∏—è {episode_number}:\n{video_url}"
            )
        else:
            # –î–ª—è –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–µ–æ
            await context.bot.send_video(
                chat_id=query.message.chat_id,
                video=video_url,
                caption=f"üé¨ –°–µ—Ä–∏—è {episode_number}",
                supports_streaming=True
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ watch_episode: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–∏–∏")

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ
        anime_list = get_anime_list()
        
        if not anime_list:
            await query.edit_message_text("üì≠ –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ –ø–æ–∫–∞ –ø—É—Å—Ç")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–Ω–∏–º–µ
        keyboard = [
            [InlineKeyboardButton(title, callback_data=f"anime_{id}")]
            for id, title in anime_list
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.edit_message_text(
            "üéå –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ back_to_menu: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é")

# ===================== –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å =====================
async def admin_auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        args = context.args
        
        if not args:
            await update.message.reply_text(
                "üîí –î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ:\n"
                f"/auth <–ø–∞—Ä–æ–ª—å>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /auth MySecretPassword"
            )
            return
        
        if args[0] == ADMIN_PASSWORD:
            set_admin(user_id)
            await update.message.reply_text(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ admin_auth: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if not is_admin(user_id):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–µ", callback_data="admin_add_anime")],
            [InlineKeyboardButton("üé¨ –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏—é", callback_data="admin_add_episode")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
            parse_mode="HTML",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ admin_command: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏")

async def add_anime_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        if not is_admin(query.from_user.id):
            await query.edit_message_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        
        await query.edit_message_text(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–Ω–∏–º–µ</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | URL –æ–±–ª–æ–∂–∫–∏</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>–ù–∞—Ä—É—Ç–æ | –ò—Å—Ç–æ—Ä–∏—è –æ –Ω–∏–Ω–¥–∑—è | https://example.com/naruto.jpg</code>",
            parse_mode="HTML"
        )
        context.user_data['awaiting_anime_data'] = True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ add_anime_handler: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def add_episode_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        if not is_admin(query.from_user.id):
            await query.edit_message_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        
        anime_list = get_anime_list()
        if not anime_list:
            await query.edit_message_text("‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–Ω–∏–º–µ")
            return
        
        keyboard = [
            [InlineKeyboardButton(title, callback_data=f"admin_episode_{id}")]
            for id, title in anime_list
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_cancel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üì∫ –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∏:",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ add_episode_handler: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def receive_anime_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if 'awaiting_anime_data' not in context.user_data:
            return
        
        data = update.message.text.split('|')
        if len(data) < 3:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è:\n"
                "<code>–ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | URL –æ–±–ª–æ–∂–∫–∏</code>\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return
        
        title = data[0].strip()
        description = data[1].strip()
        cover_url = data[2].strip()
        
        anime_id = add_anime(title, description, cover_url)
        await update.message.reply_text(
            f"‚úÖ –ê–Ω–∏–º–µ <b>{title}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            parse_mode="HTML"
        )
        del context.user_data['awaiting_anime_data']
        await admin_command(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ receive_anime_data: {str(e)}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–Ω–∏–º–µ")

async def select_anime_for_episode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        anime_id = int(query.data.split('_')[2])
        context.user_data['selected_anime_id'] = anime_id
        
        await query.edit_message_text(
            "üì§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –∏ –≤–∏–¥–µ–æ –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n"
            "1. –°—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (–í–ö–æ–Ω—Ç–∞–∫—Ç–µ, YouTube –∏ –¥—Ä.)\n"
            "2. –í–∏–¥–µ–æ—Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é\n\n"
            "–ü—Ä–∏–º–µ—Ä –¥–ª—è —Å—Å—ã–ª–∫–∏:\n"
            "<code>1 | https://vk.com/video-12345678_456239017</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä –¥–ª—è –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞:\n"
            "<code>1</code> (–≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –≤–∏–¥–µ–æ)",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ select_anime_for_episode: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def receive_episode_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if 'selected_anime_id' not in context.user_data:
            return
        
        anime_id = context.user_data['selected_anime_id']
        
        if update.message.video:
            # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª
            if not update.message.caption:
                await update.message.reply_text("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –≤ –ø–æ–¥–ø–∏—Å–∏ –∫ –≤–∏–¥–µ–æ")
                return
                
            episode_number = int(update.message.caption)
            video_file = await update.message.video.get_file()
            video_url = video_file.file_path  # –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –≤ Telegram
        else:
            # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–æ–π
            data = update.message.text.split('|')
            if len(data) < 2:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è:\n"
                    "<code>–ù–æ–º–µ—Ä | –°—Å—ã–ª–∫–∞</code>\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
                )
                return
            
            episode_number = int(data[0].strip())
            video_url = data[1].strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        add_episode(anime_id, episode_number, video_url)
        await update.message.reply_text(
            f"‚úÖ –°–µ—Ä–∏—è {episode_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
        )
        
        del context.user_data['selected_anime_id']
        await admin_command(update, context)
    except ValueError:
        await update.message.reply_text("‚ùå –ù–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ receive_episode_data: {str(e)}")
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–∏–∏: {str(e)}")

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        if not is_admin(query.from_user.id):
            await query.edit_message_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("SELECT COUNT(*) FROM anime")
                anime_count = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM episodes")
                episodes_count = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM users WHERE is_admin = TRUE")
                admins_count = cursor.fetchone()[0]
        
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"‚Ä¢ üéå –ê–Ω–∏–º–µ –≤ –±–∞–∑–µ: <b>{anime_count}</b>\n"
            f"‚Ä¢ üé¨ –°–µ—Ä–∏–π –≤ –±–∞–∑–µ: <b>{episodes_count}</b>\n"
            f"‚Ä¢ üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: <b>{admins_count}</b>"
        )
        
        await query.edit_message_text(stats_text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ admin_stats: {str(e)}")
        await query.edit_message_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def admin_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await admin_command(update, context)

# ===================== –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è =====================
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        init_db()
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", menu))
    application.add_handler(CommandHandler("auth", admin_auth))
    application.add_handler(CommandHandler("admin", admin_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ CallbackQuery
    application.add_handler(CallbackQueryHandler(anime_details, pattern="^anime_"))
    application.add_handler(CallbackQueryHandler(watch_episode, pattern="^episode_"))
    application.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"))
    
    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    application.add_handler(CallbackQueryHandler(admin_command, pattern="^admin_panel$"))
    application.add_handler(CallbackQueryHandler(add_anime_handler, pattern="^admin_add_anime$"))
    application.add_handler(CallbackQueryHandler(add_episode_handler, pattern="^admin_add_episode$"))
    application.add_handler(CallbackQueryHandler(admin_stats, pattern="^admin_stats$"))
    application.add_handler(CallbackQueryHandler(select_anime_for_episode, pattern="^admin_episode_"))
    application.add_handler(CallbackQueryHandler(admin_cancel, pattern="^admin_cancel$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_anime_data))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_episode_data))
    application.add_handler(MessageHandler(filters.VIDEO, receive_episode_data))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
    application.run_polling()

if __name__ == '__main__':
    main()
