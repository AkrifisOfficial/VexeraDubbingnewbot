import os
import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')

        
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∏–º–µ —Å –æ–∑–≤—É—á–∫–æ–π VexeraDubbing.\n\n"
            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/menu - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ\n"
            "/auth - –í—Ö–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"
        )

    async def menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.anime_list:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –∞–Ω–∏–º–µ –ø–æ–∫–∞ –ø—É—Å—Ç")
            return
        
        keyboard = [
            [InlineKeyboardButton(title, callback_data=f"anime_{id}")]
            for id, title in self.anime_list
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üéå –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=reply_markup
        )

    async def anime_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        anime_id = int(query.data.split('_')[1])
        anime = next((a for a in self.anime_list if a[0] == anime_id), None)
        
        if not anime:
            await query.edit_message_text("‚ùå –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        episodes = self.episodes.get(anime_id, [])
        
        episodes_buttons = [
            [InlineKeyboardButton(f"‚ñ∂Ô∏è –°–µ—Ä–∏—è {num}", callback_data=f"episode_{anime_id}_{num}")]
            for num, _ in episodes
        ]
        
        control_buttons = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        
        if self.states.get(query.from_user.id, {}).get('is_admin'):
            control_buttons.append(
                [InlineKeyboardButton("üì• –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏—é", callback_data=f"add_episode_{anime_id}")]
            )
        
        reply_markup = InlineKeyboardMarkup(episodes_buttons + control_buttons)
        
        await query.edit_message_text(
            f"üì∫ <b>{anime[1]}</b>\n\n"
            f"üî¢ –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Ä–∏–π: {len(episodes)}",
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    async def watch_episode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        _, anime_id, episode_num = query.data.split('_')
        anime_id = int(anime_id)
        episode_num = int(episode_num)
        
        episode = next((ep for ep in self.episodes.get(anime_id, []) if ep[0] == episode_num), None)
        
        if not episode:
            await query.edit_message_text("‚ùå –°–µ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        video_url = episode[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ VK –≤–∏–¥–µ–æ
        if "vk.com/video" in video_url:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º video_id –∏–∑ —Å—Å—ã–ª–∫–∏
            match = re.search(r'vk\.com\/video(-?\d+_\d+)', video_url)
            if match:
                video_id = match.group(1)
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ Telegram
                vk_play_url = f"https://vk.com/video{video_id}?embed"
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"üé• –°–µ—Ä–∏—è {episode_num}\n\n"
                         f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {vk_play_url}\n\n"
                         "‚ö†Ô∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏'"
                )
                return
        
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"üé• –°–µ—Ä–∏—è {episode_num}\n\n{video_url}"
        )

    async def back_to_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        await self.menu(query.message, context)

    async def admin_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        args = context.args
        
        if not args:
            await update.message.reply_text(
                "üîí –î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ:\n"
                f"/auth <–ø–∞—Ä–æ–ª—å>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: /auth MySecretPassword"
            )
            return
        
        if args[0] == ADMIN_PASSWORD:
            self.states[user.id] = {'is_admin': True}
            await update.message.reply_text(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n"
                "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
            )
            await self.show_admin_panel(update, context)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if not self.states.get(user.id, {}).get('is_admin'):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–µ", callback_data="admin_add_anime")],
            [InlineKeyboardButton("üì§ –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–∏", callback_data="admin_add_episodes")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
                parse_mode="HTML",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>",
                parse_mode="HTML",
                reply_markup=reply_markup
            )

    async def add_anime_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        if not self.states.get(user.id, {}).get('is_admin'):
            await query.edit_message_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        
        self.states[user.id]['step'] = 'awaiting_anime_data'
        await query.edit_message_text(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–Ω–∏–º–µ</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
            parse_mode="HTML"
        )

    async def process_anime_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if self.states.get(user.id, {}).get('step') != 'awaiting_anime_data':
            return
        
        title = update.message.text.strip()
        new_id = max([a[0] for a in self.anime_list], default=0) + 1
        self.anime_list.append((new_id, title))
        self.episodes[new_id] = []
        
        self.states[user.id]['step'] = None
        await update.message.reply_text(
            f"‚úÖ –ê–Ω–∏–º–µ <b>{title}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            parse_mode="HTML"
        )
        await self.show_admin_panel(update, context)

    async def add_episodes_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        if not self.states.get(user.id, {}).get('is_admin'):
            await query.edit_message_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        
        keyboard = [
            [InlineKeyboardButton(title, callback_data=f"select_anime_{id}")]
            for id, title in self.anime_list
        ]
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üì∫ –í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∏–º–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–π:",
            reply_markup=reply_markup
        )

    async def select_anime_for_episodes(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        anime_id = int(query.data.split('_')[2])
        user = query.from_user
        
        self.states[user.id]['step'] = 'awaiting_episodes'
        self.states[user.id]['selected_anime'] = anime_id
        
        await query.edit_message_text(
            "üì§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–π</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>https://vk.com/video-12345678_456239017</code>\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
            parse_mode="HTML"
        )

    async def process_episode_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if self.states.get(user.id, {}).get('step') != 'awaiting_episodes':
            return
        
        try:
            anime_id = self.states[user.id]['selected_anime']
            video_url = update.message.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ VK
            if "vk.com/video" not in video_url:
                await update.message.reply_text(
                    "‚ùå –≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–∏—é
            new_episode_num = len(self.episodes.get(anime_id, [])) + 1
            self.episodes.setdefault(anime_id, []).append((new_episode_num, video_url))
            
            await update.message.reply_text(
                f"‚úÖ –°–µ—Ä–∏—è {new_episode_num} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
            )
            
            self.states[user.id]['step'] = None
            
        except Exception as e:
            logger.error(f"Error adding episode: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def cancel_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        self.states[user.id] = {'step': None}
        
        await update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        )
        await self.show_admin_panel(update, context)

def main():
    bot = AnimeBot()
    
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CommandHandler("menu", bot.menu))
    app.add_handler(CommandHandler("auth", bot.admin_auth))
    app.add_handler(CommandHandler("cancel", bot.cancel_action))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    app.add_handler(CallbackQueryHandler(bot.anime_details, pattern="^anime_"))
    app.add_handler(CallbackQueryHandler(bot.watch_episode, pattern="^episode_"))
    app.add_handler(CallbackQueryHandler(bot.back_to_menu, pattern="^back_to_menu$"))
    app.add_handler(CallbackQueryHandler(bot.show_admin_panel, pattern="^admin_panel$"))
    app.add_handler(CallbackQueryHandler(bot.add_anime_handler, pattern="^admin_add_anime$"))
    app.add_handler(CallbackQueryHandler(bot.add_episodes_handler, pattern="^admin_add_episodes$"))
    app.add_handler(CallbackQueryHandler(bot.select_anime_for_episodes, pattern="^select_anime_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.process_anime_data))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.process_episode_data))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == '__main__':
    main()
