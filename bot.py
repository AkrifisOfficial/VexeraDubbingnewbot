import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_PASSWORD = os.getenv('ADMIN_PASSWORD')


    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        self.states[user.id] = {'step': None}
        
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∏–º–µ —Å –æ–∑–≤—É—á–∫–æ–π VexeraDubbing.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∞–Ω–∏–º–µ."
        )

    async def menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∞–Ω–∏–º–µ"""
        keyboard = [
            [InlineKeyboardButton(self.current_anime['title'], callback_data=f"anime_{self.current_anime['id']}")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üéå –î–æ—Å—Ç—É–ø–Ω–æ–µ –∞–Ω–∏–º–µ:",
            reply_markup=reply_markup
        )

    async def anime_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–Ω–∏–º–µ"""
        query = update.callback_query
        await query.answer()
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–µ—Ä–∏–π
        episodes = [
            (1, "https://vk.com/video-12345678_456239017"),
            (2, "https://vk.com/video-12345678_456239018")
        ]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–µ—Ä–∏—è–º–∏
        episodes_buttons = [
            [InlineKeyboardButton(f"‚ñ∂Ô∏è –°–µ—Ä–∏—è {num}", callback_data=f"episode_{self.current_anime['id']}_{num}")]
            for num, _ in episodes
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        control_buttons = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(episodes_buttons + control_buttons)
        
        await query.edit_message_text(
            f"üì∫ <b>{self.current_anime['title']}</b>\n\n"
            f"{self.current_anime['description']}\n\n"
            f"üî¢ –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Ä–∏–π: {len(episodes)}",
            parse_mode="HTML",
            reply_markup=reply_markup
        )

    async def watch_episode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä–∏—é"""
        query = update.callback_query
        await query.answer()
        
        _, anime_id, episode_num = query.data.split('_')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ—Ä–∏—é (–∑–∞–≥–ª—É—à–∫–∞)
        vk_url = "https://vk.com/video-12345678_456239017"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ —Ç–µ–∫—Å—Ç (–±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è –≤ TG)
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"üé• –°–µ—Ä–∏—è {episode_num}:\n{vk_url}"
        )

    async def back_to_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        await self.menu(query.message, context)

    async def admin_auth(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user = update.effective_user
        args = context.args
        
        if not args:
            await update.message.reply_text(
                "üîí –î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ:\n"
                f"/auth <–ø–∞—Ä–æ–ª—å>"
            )
            return
        
        if args[0] == ADMIN_PASSWORD:
            self.states[user.id] = {'is_admin': True}
            await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
            await self.show_admin_panel(update, context)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user = update.effective_user
        if not self.states.get(user.id, {}).get('is_admin'):
            await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏–∏", callback_data="admin_add_episodes")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                "‚öôÔ∏è –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                reply_markup=reply_markup
            )

    async def add_episodes_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–π"""
        query = update.callback_query
        await query.answer()
        
        user = query.from_user
        if not self.states.get(user.id, {}).get('is_admin'):
            await query.edit_message_text("üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
            return
        
        self.states[user.id]['step'] = 'awaiting_episodes'
        
        await query.edit_message_text(
            "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ VK –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<code>–ù–æ–º–µ—Ä | URL</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "<code>1 | https://vk.com/video-12345678_456239017</code>\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
            parse_mode="HTML"
        )

    async def process_episode_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏"""
        user = update.effective_user
        if self.states.get(user.id, {}).get('step') != 'awaiting_episodes':
            return
        
        try:
            data = update.message.text.split('|')
            if len(data) < 2:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: –ù–æ–º–µ—Ä | URL\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return
            
            episode_num = int(data[0].strip())
            vk_url = data[1].strip()
            
            if "vk.com/video" not in vk_url:
                await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ VK")
                return
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
            # add_episode_to_db(self.current_anime['id'], episode_num, vk_url)
            
            await update.message.reply_text(
                f"‚úÖ –°–µ—Ä–∏—è {episode_num} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
            )
            
            self.states[user.id]['step'] = None
            await self.show_admin_panel(update, context)
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
        except Exception as e:
            logger.error(f"Error adding episode: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def cancel_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
        user = update.effective_user
        self.states[user.id] = {'step': None}
        
        await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await self.show_admin_panel(update, context)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = AnimeBot()
    
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CommandHandler("menu", bot.menu))
    app.add_handler(CommandHandler("auth", bot.admin_auth))
    app.add_handler(CommandHandler("cancel", bot.cancel_action))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    app.add_handler(CallbackQueryHandler(bot.anime_details, pattern="^anime_"))
    app.add_handler(CallbackQueryHandler(bot.watch_episode, pattern="^episode_"))
    app.add_handler(CallbackQueryHandler(bot.back_to_menu, pattern="^back_to_menu$"))
    app.add_handler(CallbackQueryHandler(bot.show_admin_panel, pattern="^admin_panel$"))
    app.add_handler(CallbackQueryHandler(bot.add_episodes_handler, pattern="^admin_add_episodes$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.process_episode_data))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == '__main__':
    main()
